{"version":3,"sources":["Nav.js","Components/Form.js","Components/Wth.js","weather.js","Components/Cards/Cards.jsx","Components/Chart/Chart.jsx","Components/CountryPicker/CountryPicker.jsx","covid.js","App.js","serviceWorker.js","index.js","Components/Cards/Cards.module.css","Components/Chart/Chart.module.css"],"names":["Nav","className","to","Forms","onSubmit","this","props","getWeather","type","name","placeholder","React","Component","Wth","city","country","temperature","humidity","description","error","API_KEY","weather","state","undefined","e","a","preventDefault","target","elements","value","fetch","api_call","json","data","console","log","setState","main","temp","sys","Form","Cards","confirmed","recovered","deaths","lastUpdate","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","duration","seperator","Date","toDateString","Chart","useState","dailyData","setDailyData","useEffect","fetchDailyData","fetchAPI","lineChart","length","labels","map","date","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","fetchCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","i","key","url","fetchData","changeableUrl","axios","get","modifiedData","total","reportDate","countries","covid","fetchedData","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message","module","exports"],"mappings":"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","file":"static/js/main.59c04340.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\nimport {Link} from 'react-router-dom';\r\n\r\nfunction Nav() {\r\n\r\n  return (\r\n      <nav>\r\n          <ul className=\"nav-links\">\r\n              <Link  to =\"/weather\">\r\n                <li>Weather</li>\r\n              </Link>\r\n              <Link  to =\"/covid\">\r\n                <li>Covid</li>\r\n              </Link>\r\n          </ul>\r\n      </nav>\r\n  );\r\n}\r\n\r\nexport default Nav;\r\n","import React from \"react\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\n\r\nclass Forms extends React.Component{\r\n    render(){\r\n        return(\r\n            <form onSubmit={this.props.getWeather}>\r\n                <input type=\"text\" name=\"city\" placeholder=\"City\"/>\r\n                <input type=\"text\" name=\"country\" placeholder=\"Country\"/>\r\n                <button>Get Weather</button>\r\n            </form>\r\n        );\r\n    }\r\n};\r\n\r\nexport default Forms;","import React from 'react';\r\n\r\nclass Wth extends React.Component{\r\n    render(){\r\n        return(\r\n            <div className=\"weather__info\">\r\n               { \r\n               this.props.city && this.props.country && <p className=\"weather__key\">Location: \r\n                   <span className=\"weather__value\"> {this.props.city},{this.props.country}</span>\r\n                   </p>\r\n                   }\r\n               {\r\n               this.props.temperature && <p className=\"weather__key\">Temperature: \r\n                   <span className=\"weather__value\"> {this.props.temperature}</span>\r\n                   </p>\r\n               }\r\n               {\r\n               this.props.humidity && <p className=\"weather__key\">Humidity:\r\n                   <span className=\"weather__value\"> {this.props.humidity}</span>\r\n                   </p>\r\n               }\r\n               {\r\n               this.props.description && <p className=\"weather__key\">Conditions:\r\n                   <span className=\"weather__value\"> {this.props.description}</span>\r\n                   </p>\r\n               }\r\n               {\r\n               this.props.error && <p className=\"weather__error\"> {this.props.error}</p>\r\n               }\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default Wth;","import React from 'react';\r\nimport './weather.css';\r\nimport Forms from './Components/Form';\r\nimport Wth from './Components/Wth';\r\nimport './Components/Form.css'\r\n\r\nconst API_KEY = \"c5a6f36df2e854825cf78b60209a47f9\";\r\n\r\nclass weather extends React.Component{\r\n\r\n  state = {\r\n    temperature: undefined,\r\n    city: undefined,\r\n    country: undefined,\r\n    humidity: undefined,\r\n    description: undefined,\r\n    error: undefined\r\n  }\r\n\r\n  getWeather = async (e)=>{\r\n    e.preventDefault();\r\n    const city = e.target.elements.city.value;\r\n    const country = e.target.elements.country.value;\r\n    const api_call = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}`);\r\n    const data = await api_call.json();\r\n    \r\n\r\n    if(city && country){\r\n      console.log(data);\r\n      this.setState({\r\n        temperature: data.main.temp,\r\n        city: data.name,\r\n        country: data.sys.country,\r\n        humidity: data.main.humidity,\r\n        description: data.weather[0].description,\r\n        error:\"\"\r\n      });\r\n    }\r\n    else{\r\n      this.setState({\r\n        temperature: undefined,\r\n        city: undefined,\r\n        country: undefined,\r\n        humidity: undefined,\r\n        description: undefined,\r\n        error:\"Enter Location\"\r\n    });\r\n  }\r\n}\r\n\r\n\r\n  render(){\r\n    return(\r\n      <div>\r\n        <div className=\"wrapper\">\r\n          <div className=\"main\">\r\n            <div className=\"conatainer\">\r\n              <div className=\"row\">\r\n                <div className=\"col-xs-7 form-container\">\r\n                <Forms getWeather={this.getWeather}/>\r\n                  <Wth \r\n                  temperature={this.state.temperature}\r\n                  city={this.state.city}\r\n                  country={this.state.country}\r\n                  humidity={this.state.humidity}\r\n                  description={this.state.description}\r\n                  error={this.state.error}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default weather;\r\n","import React from 'react';\r\nimport {Card, CardContent, Typography, Grid} from '@material-ui/core';\r\nimport styles from './Cards.module.css';\r\nimport CountUp from 'react-countup';\r\nimport cx from 'classnames'\r\n\r\n\r\nconst Cards = ({data:{confirmed, recovered, deaths, lastUpdate}})=>{\r\n    if(!confirmed){\r\n        return 'Loading...';\r\n    }\r\n    return(\r\n        <div className={styles.container}>\r\n            <Grid container spacing={3} justify=\"center\">\r\n                    <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.infected)}>\r\n                        <CardContent>\r\n                            <Typography color=\"textSecondary\" gutterBottom>Infected</Typography>\r\n                            <Typography variant=\"h5\">\r\n                                <CountUp start={0} end={confirmed.value} duration={2} seperator=\",\" />\r\n                            </Typography>\r\n                            <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                            <Typography variant=\"body2\">Number of active cases</Typography>\r\n                        </CardContent>\r\n                     </Grid>\r\n                    <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}>\r\n                        <CardContent>\r\n                            <Typography color=\"textSecondary\" gutterBottom>Recovered</Typography>\r\n                            <Typography variant=\"h5\">\r\n                                <CountUp start={0} end={recovered.value} duration={2} seperator=\",\" />\r\n                            </Typography>\r\n                            <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                            <Typography variant=\"body2\">Number of Recovered cases</Typography>\r\n                        </CardContent>\r\n                     </Grid>\r\n                    <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.deaths)}>\r\n                        <CardContent>\r\n                            <Typography color=\"textSecondary\" gutterBottom>Deaths</Typography>\r\n                            <Typography variant=\"h5\">\r\n                                <CountUp start={0} end={deaths.value} duration={2} seperator=\",\" />\r\n                            </Typography>\r\n                            <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                            <Typography variant=\"body2\">Number of Deaths</Typography>\r\n                        </CardContent>\r\n                    </Grid>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cards;","import React, {useState, useEffect} from 'react';\r\nimport {fetchDailyData} from './../../covid';\r\nimport {Line,Bar} from 'react-chartjs-2';\r\nimport styles from './Chart.module.css';\r\n\r\nconst Chart = ({data:{confirmed,deaths,recovered},country})=>{\r\n    const [dailyData, setDailyData] = useState([]);\r\n    useEffect(()=>{\r\n        const fetchAPI = async () =>{\r\n            setDailyData(await fetchDailyData());\r\n        }\r\n\r\n        fetchAPI();\r\n    },[]);\r\n\r\n\r\n    const lineChart = (\r\n        dailyData.length ?(\r\n            <Line\r\n            data={{\r\n                labels: dailyData.map(({date})=>date),\r\n                datasets: [{\r\n                    data: dailyData.map(({confirmed})=> confirmed),\r\n                    label: 'Infected',\r\n                    borderColor:'#333ff',\r\n                    fill: true,\r\n                },{\r\n                    data: dailyData.map(({deaths})=> deaths),\r\n                    label: 'Deaths',\r\n                    borderColor:'red',\r\n                    backgroundColor: 'rgb(153, 9, 9, 0.5)',\r\n                    fill: true,\r\n                }],\r\n            }}\r\n        />):null\r\n    );\r\n\r\n    const barChart = (\r\n        confirmed ?(\r\n            <Bar\r\n                data = {{\r\n                    labels: ['Infected','Recovered','Deaths'],\r\n                    datasets:[{\r\n                        label: 'People',\r\n                        backgroundColor:[\r\n                            'rgb(0, 0, 255, 0.5)',\r\n                            'rgb(51, 216, 51, 0.5)',\r\n                            'rgb(153, 9, 9, 0.5),'\r\n                        ],\r\n                        data:[confirmed.value,recovered.value,deaths.value]\r\n                    }]\r\n                }}\r\n                options={{\r\n                    legend: {display:false},\r\n                    title:{display:true, text:`Current state in ${country}`},\r\n                }}\r\n            />):null\r\n    );\r\n  \r\n    return(\r\n        <div className={styles.container}>\r\n            { country ? barChart :lineChart}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chart;","import React, { useState, useEffect} from 'react';\r\nimport {NativeSelect, FormControl} from '@material-ui/core';\r\nimport styles from './CountryPicker.module.css';\r\nimport {fetchCountries} from '../../covid';\r\n\r\n\r\nconst CountryPicker = ({handleCountryChange})=>{\r\n    const [fetchedCountries, setFetchedCountries] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchAPI = async () => {\r\n            setFetchedCountries(await fetchCountries());\r\n        }\r\n        fetchAPI();\r\n    },[setFetchedCountries]);\r\n    console.log(fetchedCountries);\r\n\r\n    return(\r\n        <FormControl className = {styles.formControl}>\r\n            <NativeSelect defaultValue=\"\" onChange={(e)=> handleCountryChange(e.target.value)} >\r\n                <option value=\"\">Global</option>\r\n                {fetchedCountries.map((country,i) => <option key={i} value = {country}>{country}</option>)}\r\n            </NativeSelect>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport default CountryPicker;","import React from 'react';\r\nimport './covid.css';\r\nimport Cards from './Components/Cards/Cards';\r\nimport Chart from './Components/Chart/Chart';\r\nimport CountryPicker from './Components/CountryPicker/CountryPicker';\r\nimport axios from 'axios';\r\n\r\nconst url = 'https://covid19.mathdro.id/api';\r\n\r\nexport const fetchData = async(country)=>{\r\n  let changeableUrl = url;\r\n\r\n  if(country){\r\n    changeableUrl = `${url}/countries/${country}`;\r\n  }\r\n\r\n  try{\r\n    const {data : {confirmed, recovered, deaths, lastUpdate}} = await axios.get(changeableUrl);\r\n\r\n    return {confirmed, recovered, deaths, lastUpdate};\r\n  }\r\n  catch(error){\r\n    console.log(error);\r\n  }\r\n}\r\n\r\nexport const fetchDailyData = async () =>{\r\n  try{\r\n    const {data} = await axios.get(`${url}/daily`);\r\n\r\n    const modifiedData = data.map((dailyData)=>({\r\n      confirmed: dailyData.confirmed.total,\r\n      deaths: dailyData.deaths.total,\r\n      date: dailyData.reportDate,\r\n    }));\r\n    return modifiedData;\r\n  }catch(error){\r\n    console.log(error);\r\n  }\r\n}\r\n\r\nexport const fetchCountries = async() =>{\r\n  try{\r\n    const{data:{countries}} = await axios.get(`${url}/countries`);\r\n    return countries.map((country)=> country.name);\r\n  } catch(error){\r\n      console.log(error);\r\n  }\r\n}\r\n\r\n\r\nclass covid extends React.Component{\r\n\r\n  state = {\r\n    data:{},\r\n    country:'',\r\n  }\r\n\r\n  async componentDidMount() {\r\n    const fetchedData = await fetchData();\r\n  \r\n    this.setState({data : fetchedData});\r\n  }\r\n\r\n  handleCountryChange = async (country) =>{\r\n    const fetchedData = await fetchData(country);\r\n    this.setState({data : fetchedData, country: country});\r\n  }\r\n\r\n  render(){\r\n    const {data,country} = this.state;\r\n\r\n    return (\r\n      <div className=\"container\">\r\n        <Cards data={data} />\r\n        <CountryPicker handleCountryChange={this.handleCountryChange} />\r\n        <Chart  data={data} country={country}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default covid;\r\n","import React from 'react';\nimport './App.css';\nimport Nav from './Nav';\nimport weather from './weather';\nimport covid from './covid';\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom';\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Nav />\n        <h1>Welcome!!</h1>\n        <h2>Click on nav-bar for info</h2>\n        <Switch>\n          <Route path=\"/weather\" component={weather} />\n          <Route path=\"/covid\" component={covid} />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__2-6hT\",\"card\":\"Cards_card__Go5x4\",\"infected\":\"Cards_infected__3ykHQ\",\"recovered\":\"Cards_recovered__wvLr8\",\"deaths\":\"Cards_deaths__30nGu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__3gE46\"};"],"sourceRoot":""}